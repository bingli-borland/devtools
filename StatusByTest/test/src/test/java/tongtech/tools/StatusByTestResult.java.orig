/*
 * Copyright (C) 2010 Atlassian
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package tongtech.tools;

import com.atlassian.jira.rest.client.api.JiraRestClient;
import com.atlassian.jira.rest.client.api.domain.Issue;
import com.atlassian.jira.rest.client.api.domain.SearchResult;
import com.atlassian.jira.rest.client.api.domain.Transition;
import com.atlassian.jira.rest.client.api.domain.input.TransitionInput;
import com.atlassian.jira.rest.client.internal.async.AsynchronousJiraRestClientFactory;
import org.codehaus.jettison.json.JSONException;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.io.File;
/**
 * A sample code how to use JRJC library
 *
 * @since v0.1
 */
public class StatusByTestResult {

    private static URI jiraServerUri = URI.create("http://10.10.22.206:8081");
    private static boolean quiet = false;
    private static String projectName = "IncuTestManager";
    AsynchronousJiraRestClientFactory factory = null;
    JiraRestClient restClient = null;

    public static void main(String[] args) throws URISyntaxException, JSONException, IOException {
        if (args.length < 2) {
            System.out.println("usage: tongtech.tools.StatusByTestResult projectName xmlName");
            return;
        }
        String project = args[0];
        String xmlfile = args[1];
        StatusByTestResult ex = new StatusByTestResult();
        ex.readXmlAndTransition(xmlfile/*"E:/Study/atlassian/test.xml"*/, project/*projectName*/);
    }

    public void readXmlAndTransition(String filename, String projectName) throws IOException {
        try {
            factory = new AsynchronousJiraRestClientFactory();
            restClient = factory.createWithBasicHttpAuthentication(jiraServerUri, "testcase", "testcase9211");

            File fXmlFile = new File(filename);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(fXmlFile);

            //optional, but recommended
            //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
            doc.getDocumentElement().normalize();

            System.out.println("Root element :" + doc.getDocumentElement().getNodeName());

            NodeList nList = doc.getElementsByTagName("testcase");
            for (int temp = 0; temp < nList.getLength(); temp++) {/*遍历testcase节点*/
                Node nNode = nList.item(temp);
                System.out.println("\nCurrent Element :" + nNode.getNodeName());
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element eElement = (Element) nNode;
                    String className = eElement.getAttribute("classname");
                    if (className == null) {
                        className = "";
                    }
                    String functionName = eElement.getAttribute("name");
                    NodeList errorList = eElement.getElementsByTagName("error"); /*有error或者failure代表失败*/
                    NodeList failureList = eElement.getElementsByTagName("failure");
                    String key = className + "." + functionName;
                    int totalError =  errorList.getLength() + failureList.getLength();
                    System.out.println(projectName + ", " + key + ", " + totalError);
                    try {
                        transition(projectName, key, totalError == 0);
                    }
                    catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        finally {
            restClient.close();
        }
    }

    public void transition(String projectName, String key, boolean isPassed) throws URISyntaxException, JSONException, IOException {
        Issue issue = null;
        int count = 0;
        try {
            // let's now print all issues matching a JQL string (here: all assigned issues)
            key = key.replace(".", "\\u002e");/*"."是jira保留字*/
            String jql = "project=\'" + projectName + "\' and cf[10203] ~ " + key;
            System.out.println("jql " + jql);
            final SearchResult searchResult = restClient.getSearchClient().searchJql(jql).claim();
            for (Issue iss : searchResult.getIssues()) {
                issue = iss;
                count++;
                if (count > 1) {   /*多于1个，重复了名称，提示错误*/
                    System.out.println("find same implemention. " + iss.getKey());
                    throw new RuntimeException("duplication error.");
                }
            }
            if (issue == null) {/*没有找到，提示*/
                System.out.println("cannot find the implemetation. " + key);
                return;
            }
            if (isPassed) {
                toPassed(restClient, issue);
            }
            else {
                toFailed(restClient, issue);
            }
        }
        finally {
        }
    }

    private void toPassed(JiraRestClient restClient, Issue issue) {
        toInProgress(restClient, issue);
        /*必须在这里获得, 因为上面转换了状态*/
        final Iterable<Transition> transitions = restClient.getIssueClient().getTransitions(issue.getTransitionsUri()).claim();
        final Transition passTransition = getTransitionByName(transitions, "Pass");
        restClient.getIssueClient().transition(issue.getTransitionsUri(), new TransitionInput(passTransition.getId())).claim();
    }

    private void toFailed(JiraRestClient restClient, Issue issue) {
        toInProgress(restClient, issue);
        final Iterable<Transition> transitions = restClient.getIssueClient().getTransitions(issue.getTransitionsUri()).claim();
        final Transition failTransition = getTransitionByName(transitions, "Fail");
        restClient.getIssueClient().transition(issue.getTransitionsUri(), new TransitionInput(failTransition.getId())).claim();
    }

    private void toInProgress(JiraRestClient restClient, Issue issue) {
        Iterable<Transition> transitions = null;
        Transition assignToRunTransition = null, inProgressTransition = null, reRunTransition = null;
        String statusName =  issue.getStatus().getName();
        System.out.println("status is " + statusName + "/");
        if (statusName.equals("Create") || statusName.equals("Open") || statusName.equals("Awaiting Review")) {
            //do nothing
            System.out.println(issue.getId() + ", " + statusName + ", not ready, do nothing.");
        }
        else if (statusName.equals("Template")) {
            /*只能在这里获得, 因为状态不同, transition不同*/
            transitions = restClient.getIssueClient().getTransitions(issue.getTransitionsUri()).claim();
            assignToRunTransition = getTransitionByName(transitions, "Assign To Run");
            restClient.getIssueClient().transition(issue.getTransitionsUri(), new TransitionInput(assignToRunTransition.getId())).claim();
            transitions = restClient.getIssueClient().getTransitions(issue.getTransitionsUri()).claim();
            inProgressTransition = getTransitionByName(transitions, "In Progress");
            restClient.getIssueClient().transition(issue.getTransitionsUri(), new TransitionInput(inProgressTransition.getId())).claim();
        }
        else if (statusName.equals("Ready To Run")) {
            transitions = restClient.getIssueClient().getTransitions(issue.getTransitionsUri()).claim();
            inProgressTransition = getTransitionByName(transitions, "In Progress");
            restClient.getIssueClient().transition(issue.getTransitionsUri(), new TransitionInput(inProgressTransition.getId())).claim();
        }
        else if (statusName.equals("In Progress")) {
            /*do nothing*/
        }
        else if (statusName.equals("Passed") || statusName.equals("Failed")) {
            transitions = restClient.getIssueClient().getTransitions(issue.getTransitionsUri()).claim();
            reRunTransition = getTransitionByName(transitions, "Rerun");
            restClient.getIssueClient().transition(issue.getTransitionsUri(), new TransitionInput(reRunTransition.getId())).claim();
            transitions = restClient.getIssueClient().getTransitions(issue.getTransitionsUri()).claim();
            inProgressTransition = getTransitionByName(transitions, "In Progress");
            restClient.getIssueClient().transition(issue.getTransitionsUri(), new TransitionInput(inProgressTransition.getId())).claim();
        }
        else if (statusName.equals("Closed") || statusName.equals("Invalid")) {
            /*do nothing, 不做任何处理*/
        }
        else {
            /*状态修改过, 程序没有改动.*/
            throw new RuntimeException("status error.");
        }
    }

    private Transition getTransitionByName(Iterable<Transition> transitions, String transitionName) {
        for (Transition transition : transitions) {
            if (transition.getName().equals(transitionName)) {
                return transition;
            }
        }
        return null;
    }

}
